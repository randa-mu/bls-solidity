pragma solidity ^0.8;

import {Test, console} from "forge-std-1.10.0/src/Test.sol";

// helpers
import {BLS} from "src/libraries/BLS.sol";

contract BLSTest is Test {
    function test_sample_signature() public view {
BLS.PointG2 memory pk = BLS.PointG2([5838992826193349966357268616665404381433472226083567344457223955089099207810, 7443551230336632695654952939029281494467559716523100842530624021561054602204], [8587802453880553245650725475740899117965522901638095133768179426207296887795, 21457554579773484299265442011477624571798879699696467812994904700443263942520]);
BLS.PointG1 memory sig = BLS.PointG1(7901903815049524482096231647574410489430116000772174647307272692982723667747, 9602902115719281793852526489338977181632383432254830939648007541154086057984);
string memory message = "hello";
string memory dst = "dcipher-randomness-v01-BN254G1_XMD:KECCAK-256_SVDW_RO_0x0000000000000000000000000000000000000000000000000000000000000001";
BLS.PointG1 memory messageP = BLS.hashToPoint(bytes(dst), bytes(message));
BLS.verifySingle(sig, pk, messageP);
    }
}
